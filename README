jus Haskell勉強会のメモ
http://www.jus.or.jp/benkyokai/09-03Haskell.html

== Ustream.tv
当日のデスクトップをUstreamで中継予定です
http://www.ustream.tv/channel/takano32

== インストール
Macの場合はghcとcabalをMacPortsからインストール
> sudo port install ghc
> sudo port install hs-cabal

====
勉強会の内容
====
1. 関数プログラミング
  * 関数プログラミングの風味
  * 抽象化の手法
2. スクリプトプログラミング
  * 入出力アクション
  * プログラミングの実際

=====
* 関数型の定義とは？
  * 一般的には関数が 第一級 First Class
  * 関数が関数の引数になれる
  * 関数が関数の返値になれる

関数型の言語に慣れた人にはあたりまえ

====
* 関数型プログラミング
  * 宣言の集まり
  * 計算は関数の適用
  * 式のみで計算を表現

====
* 文 statement
  * 内部の状態の変更
  * 逐次実行

* 式 expression
  * 値の表示
  * 関数適用

====
* 関数プログラミングにない概念
  * 状態という概念はない
    * 状態やオブジェクトのインスタンス
    * 副作用はない

* 実行という概念はない
  * 評価は実行ではない
  * すべては計算と適用

* 概念がない
  => 第一級の対象ではない
====
* GHCiとの対話
  * 対話型インタプリタ

* GHCiの仕事
  * 式の値を表示する
  1. 文字列 => 構文木
  2. 印字表現生成に必要な正規形まで簡約
  * 印字表現 = 文字列
  * 結果の生成に必要のないことはやらない

* 命令
:quit or :q
:set prompt "ghci> "

====
* 名前をつける = 抽象化
  * 式に名前をつける
  * 単純式: 意味のある名前 = 意図を表現
  * 複合式: ひとつのものとして扱う = 詳細を捨象

* Haskellでの方法は？
  * エディタで書いてghciで読み込む
  * 入出力アクション
  * プログラミングの実際
    ghci> :set editor /opt/local/bin/vim
====
* 用語
  * 定義: 値に名前をつける
  * 宣言: 定義のための構文
  * 束縛: 名前を値に結びつける
  * 環境: 束縛の集合
====
* 型付け
  * 型の結びつきが強い
  * コンパイルでエラーがでなければほとんど正常動作

* 関数の型
  * Int -> Int など
====
* 関数bmiの仕様
  * Height型の値とWeight型の値を含む型
  * (Height, Weight)      -- <= Tuple
====
* 関数の定義方法
  * 関数を適用した値を定義する
  * 関数を適用した値はどのように構成するか

    f x = x^2 + 1
    f = \ x -> x^2 + 1

  バックスラッシュはラムダ

====
* すべての型にはボトム(_|_)がふくまれる
* undefinedは_|_を表す式
* undefinedを簡約しようとすると例外が発生する
====
演算子には結合順位がある
 "^" > "/"
* / 左結合
* ^ 右結合
====
* コメントは意図を書く => 型を書く
* 処理系が意図をチェックしてくれる！


====
* 専用BMI関数
  * 大人の身長はあまり変化しない
  * 体重だけ入れればでるはず！
====
* 関数を作る関数の作成
mkbmi :: Height -> (Weight -> BMI)



====
* 再帰の心得

  * 一歩手前までできたと思う！
n! = (n - 1)! * n
fact n = fact (n - 1) * n

* 手続き的に考えようとしてはいけない
* ループを考えようとしてはいけない
* 値の構成を考えよ

====

* 枝分かれする再帰の問題
  * 分岐により同じ計算が複数独立して行われる
    ex. フィボナチ数列
====
リスト
帰納的定義で定義済み

左辺は型構成子
右辺は値構成子

 data [] a = []
           | a : [] a

 data [a] = []
           | a : [a]
リストには同じ型しか入らない
====
